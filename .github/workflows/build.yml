name: build

on: push

env:
  NIGHTLY_COMMIT: 5e17a2a91dd7dbefd8b4a1087c2e42257457deeb
  NIGHTLY_VERSION: '2025-04-05'
  LLVM_VERSION: 18.1.8

jobs:
  build:
    runs-on: ${{ matrix.os }}
    container:
      image: rockylinux:9
    strategy:
      matrix:
        include:
          - arch: x86_64
            os: ubuntu-latest
          - arch: aarch64
            os: ubuntu-24.04-arm
    steps:
      - name: Install Build Dependencies
        run: |
          dnf install -yq epel-release 'dnf-command(config-manager)'
          dnf config-manager --enable crb
          dnf groupinstall -yq "Development Tools"
          dnf install -yq \
            git \
            cmake \
            ninja-build \
            pkg-config \
            perl \
            lld \
            zstd \
            xz \
            wget \
            openssl-devel \
            zlib-devel \
            libzstd-devel \
            jemalloc-devel
            
      - name: Restore cached LLVM
        id: cache-llvm
        uses: actions/cache@v4
        with:
          path: /opt/llvm-18
          key: llvm-18-${{ matrix.arch }}-${{ env.LLVM_VERSION }}

      - name: Checkout LLVM Repository
        uses: actions/checkout@v5
        if: steps.cache-llvm.outputs.cache-hit != 'true'
        with:
          repository: llvm/llvm-project
          ref: llvmorg-${{ env.LLVM_VERSION }}
          path: llvm-project
          submodules: true
          
      - name: Build and Install LLVM
        if: steps.cache-llvm.outputs.cache-hit != 'true'
        run: |
          mkdir llvm-build
          cd llvm-build
          cmake -G Ninja ../llvm-project/llvm \
            -DCMAKE_INSTALL_PREFIX=/opt/llvm-18 \
            -DCMAKE_BUILD_TYPE=MinSizeRel \
            -DLLVM_VERSION_SUFFIX=-rust-nightly-${{ env.NIGHTLY_VERSION }} \
            -DLLVM_ENABLE_LLD=ON \
            -DLLVM_ENABLE_ASSERTIONS=ON \
            -DLLVM_ABI_BREAKING_CHECKS=FORCE_ON \
            -DLLVM_UNREACHABLE_OPTIMIZE=OFF \
            -DLLVM_ENABLE_PLUGINS=ON \
            -DLLVM_TARGETS_TO_BUILD="AArch64;AMDGPU;ARM;BPF;Hexagon;LoongArch;MSP430;Mips;NVPTX;PowerPC;RISCV;Sparc;SystemZ;WebAssembly;X86" \
            -DLLVM_EXPERIMENTAL_TARGETS_TO_BUILD="AVR;M68k;CSKY;Xtensa" \
            -DLLVM_INCLUDE_EXAMPLES=OFF \
            -DLLVM_INCLUDE_DOCS=OFF \
            -DLLVM_INCLUDE_BENCHMARKS=OFF \
            -DLLVM_INCLUDE_TESTS=OFF \
            -DLLVM_ENABLE_TERMINFO=OFF \
            -DLLVM_ENABLE_LIBEDIT=OFF \
            -DLLVM_ENABLE_BINDINGS=OFF \
            -DLLVM_ENABLE_Z3_SOLVER=OFF \
            -DLLVM_INSTALL_UTILS=ON \
            -DLLVM_LINK_LLVM_DYLIB=ON \
            -DLLVM_ENABLE_PROJECTS="clang;lld;polly" \
            -DLLVM_ENABLE_LIBXML2=OFF \
            -DLLVM_ENABLE_RUNTIMES="compiler-rt" \
            -DLLVM_ENABLE_ZLIB:BOOL=FORCE_ON \
            -DLLVM_ENABLE_ZSTD:BOOL=FORCE_ON
          ninja -j$(nproc)
          ninja install
          /opt/llvm-18/bin/llvm-config --version
          cd ..
          # release disk space
          rm -rf llvm-project llvm-build

      - name: Checkout Rust Repository
        uses: actions/checkout@v5
        with:
          repository: rust-lang/rust
          ref: ${{ env.NIGHTLY_COMMIT }}
          path: rust
          submodules: true

      - name: Build Rust
        run: |
          cd rust
          export PATH=/opt/llvm-18/bin:$PATH
          export LD_LIBRARY_PATH=/opt/llvm-18/lib:$LD_LIBRARY_PATH
          export CXX=clang++
          export CC=clang
          ./configure \
            --prefix=/opt/rust-nightly-${{ env.NIGHTLY_VERSION }} \
            --sysconfdir=/opt/rust-nightly-${{ env.NIGHTLY_VERSION }}/etc \
            --disable-docs \
            --enable-full-tools \
            --enable-cargo-native-static \
            --enable-llvm-link-shared \
            --llvm-root=/opt/llvm-18 \
            --set=rust.jemalloc \
            --disable-lld
          make -j$(nproc)
          make install
          # Verify Installation
          /opt/rust-nightly-${{ env.NIGHTLY_VERSION }}/bin/rustc --version
          /opt/rust-nightly-${{ env.NIGHTLY_VERSION }}/bin/cargo --version

      - name: Make Archive
        run: |
          # remove hyphens from version for filename compatibility
          version="el9.${{ env.NIGHTLY_VERSION }}+${{ env.LLVM_VERSION }}.${{ matrix.arch }}"
          version=${version//-/}
          artifact_name="rust-nightly+llvm-${version}"
          filename="${artifact_name}.tar"
          
          tar -Pcvf $filename \
            /opt/rust-nightly-${{ env.NIGHTLY_VERSION }} \
            /opt/llvm-18
          xz --verbose -9e -T0 $filename
          
          echo "ARTIFACT_NAME=${artifact_name}" >> $GITHUB_ENV
          echo "ARTIFACT_PATH=${artifact_name}.tar.xz" >> $GITHUB_ENV

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ARTIFACT_PATH }}
          compression-level: "0"
